{"version":3,"file":"image.service.js","sourceRoot":"","sources":["../../src-server/app/services/image.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,4BAAkC,WAAW,CAAC,CAAA;AAC9C,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AAGzB;IAEE,kBAAkB,CAAC,WAAgB,EAAE,SAAiB,EAAE,QAAgB,EAAE,EAAqC;QAE7G,IAAI,OAAO,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;QAE3E,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;QAC3C,CAAC;QAED,IAAI,UAAU,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QAE5B,IAAI,QAAQ,GAAG,SAAS,GAAG,GAAG,GAAG,QAAQ,GAAG,OAAO,CAAC;QAEpD,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,GAAG;YACxD,EAAE,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IAEL,CAAC;AACH,CAAC;AApBD;IAAC,+BAAmB,EAAE;;gBAAA;AACT,oBAAY,eAmBxB,CAAA","sourcesContent":["import {CamembertInjectable} from \"camembert\";\nconst fs = require('fs');\n\n@CamembertInjectable()\nexport class ImageService {\n\n  saveMultipartImage(requestBody: any, directory: string, fileName: string, cb: <Function>(err, filePath) => void) {\n\n    let matches = requestBody.file.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/);\n\n    if (matches.length !== 3) {\n      return new Error('Invalid input string');\n    }\n\n    let base64Data = matches[2];\n\n    let filePath = directory + '/' + fileName + '.jpeg';\n\n    fs.writeFile(filePath, base64Data, 'base64', function (err) {\n      cb(err, filePath);\n    });\n\n  }\n}\n"]}